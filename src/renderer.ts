import { Component, Components } from './parser.js'

const htmlElementCannotHaveChildren = new Set([
    'area',
    'base',
    'br',
    'col',
    'embed',
    'hr',
    'img',
    'input',
    'link',
    'meta',
    'param',
    'source',
    'track',
    'wbr',
    ])

const canElementHaveChildren = (tag: string): boolean => !htmlElementCannotHaveChildren.has(tag)

function renderProps(component: Component, hasChildren: boolean): string {
  return Object.entries({
    children: hasChildren ? 'ReactNode' : null,
    ...component.data,
  })
    .map(([key, value]) => {
        if (!value) return null;

        if (Array.isArray(value)) {
            return `${key}?: ${value.map((v) => `'${v}'`).join(' | ')}`
        }

        if (typeof value === "string") {
            return `${key.startsWith('--') ? key.replace('--', '') : key}?: ${value.split(':')[0]}`
        }

        return `${key}?: boolean`
    }).filter((prop) => prop !== null)
    .map((line) => `  ${line}`)
    .join('\n')
}

function renderComponent(components: Components, name: string): string {
  const component = components[name]
  if (component === undefined) {
    return ''
  }

  const variables = Object.keys(component.data).filter(key => key.startsWith('--'));
  const hasVariables = variables.length > 0;

  const hasChildren = canElementHaveChildren(component.tag)

  return `type ${name}Props = {
${renderProps(component, hasChildren)}
} & JSX.IntrinsicElements['${component.tag}']

export function ${name}({ ${[
      hasChildren ? 'children' : null,
    ...Object.keys(component.data).map(key => key.startsWith('--') ? key.replace('--', '') : key),
    '...props',
  ].filter(prop => prop !== null).join(', ')} }: ${name}Props) {
  return (
    <${[
      component.tag,
      '{...props}',
      `className="${component.className}"`,
      ...Object.keys(component.data).filter(key => !key.startsWith('--')).map((key) => `data-${key}={${key}}`),
      hasVariables ? `style={{
            ${variables.map(key => 
          (component.data[key] as string)?.includes(':') ? 
              `["${key}" as string]: \`\${${key.replace('--', '')}.includes("var(--") ? \`\${${key.replace('--', '')}}\` : \`${(component.data[key] as string).split(':')[1]}-\${${key.replace('--', '')}}\`}\`` 
              : `["${key}" as string]: \`\${${key.replace('--', '')}}\``)
          .join(',\r\n\t\t\t')}
        }}` : null,
    ].filter(item => item !== null).join("\r\n\t\t")}
    ${hasChildren ? `>
      {children}
    </${component.tag}>` : '/>'}
  )
}
`
}

export function render(name: string, components: Components): string {
  return `// Generated by MistCSS, do not modify
import './${name}.mist.css'

import type { JSX, ReactNode } from 'react'

${Object.keys(components)
  .map((key) => renderComponent(components, key))
  .join('\n')
  .trim()}
`
}
