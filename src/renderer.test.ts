import assert from 'node:assert'
import fs from 'node:fs'
import test from 'node:test'

import { Components, parseInput } from './parser.js'
import { render } from './renderer.js'

// Fixtures
const mistCSS: string = fs.readFileSync('fixtures/Foo.mist.css', 'utf-8')
const mistTSX: string = fs.readFileSync('fixtures/Foo.mist.tsx', 'utf-8')

void test('render', () => {
  const name = 'Foo'
  const parsedInput: Components = parseInput(mistCSS)
  const actual = render(name, parsedInput)
  const expected: string = mistTSX

  // Update fixtures if needed
  if (process.env['UPDATE']) {
    console.log('Updating fixtures')
    fs.writeFileSync(`fixtures/${name}.mist.tsx`, render(name, parsedInput))
  }

  // Check that the generated file contains the expected content
  assert.ok(actual.includes('// Generated by MistCSS'))
  assert.ok(actual.includes('type FooProps'))
  assert.ok(actual.includes('export function Foo'))
  assert.ok(actual.includes('<div'))
  assert.ok(actual.includes('className="foo"'))
  assert.ok(actual.includes('data-fooSize={fooSize}'))
  assert.ok(actual.includes('data-x={x}'))
  assert.ok(actual.includes('style={{'))
  assert.ok(actual.includes('["--background" as string]: `${background.includes("var(--") ? `${background}` : `--color-${background}`}`,'))
  assert.ok(actual.includes('["--padding" as string]: `${padding.includes("var(--") ? `${padding}` : `--spacing-${padding}`}`,'))
  assert.ok(actual.includes('["--border" as string]: `${border}`,'))
  assert.ok(actual.includes('["--test" as string]: `${test}`'))
  assert.ok(actual.includes('{children}'))
  assert.ok(actual.includes('type BarProps'))
  assert.ok(actual.includes('export function Bar'))

  // Do a full comparison as a sanity check
  assert.strictEqual(actual, expected)
})
